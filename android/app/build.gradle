def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = null

if (keystorePropertiesFile.exists()) {
    keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "de.stoupas.xkcd"
        minSdkVersion 20
        targetSdkVersion 28
        compileSdkVersion 28
        versionCode 13
        versionName "1.4.6"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            if (keystoreProperties != null) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            if (keystoreProperties != null) {
                signingConfig signingConfigs.release
                minifyEnabled true
                useProguard true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }

//    splits {
//
//        // Configures multiple APKs based on ABI.
//        abi {
//
//            // Enables building multiple APKs per ABI.
//            enable true
//
//            // By default all ABIs are included, so use reset() and include to specify that we only
//            // want APKs for x86 and x86_64.
//
//            // Resets the list of ABIs that Gradle should create APKs for to none.
//            reset()
//
//            // Specifies a list of ABIs that Gradle should create APKs for.
//            include "x86", "x86_64", "armeabi", "armeabi-v7a", "arm64-v8a"
//
//            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
//            universalApk false
//        }
//    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
